#!/usr/bin/env node

'use strict';

var mod_bunyan = require('bunyan');
var mod_mm = require('../');
var mod_path = require('path');
var mod_readline = require('readline');

var log = mod_bunyan.createLogger({
    name: 'mm',
    src: true,
    streams: [ {
        path: mod_path.join(__dirname, 'mm-debug.log'),
        level: 'trace'
    } ]
});

var account = require(mod_path.join(process.cwd(), 'account.json'));

var rl = mod_readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

var c = new mod_mm.Client({
    log: log,
    url: 'https://chat.joyent.us',
    account: account
});

c.on('connected', function (user) {
    console.log('Welcome to the Mattermost shell\n');
    console.log(JSON.stringify(user, null, 4) + '\n');

    rl.setPrompt('> ');
    rl.prompt();
});

function done() {
    console.log.apply(console, arguments);
    rl.prompt();
}

rl.on('line', function (l) {
    var arr, method;

    if (l === '') {
        rl.prompt();
        return;
    }

    if (l[0] !== '/') {
        try {
            arr = JSON.parse(l);
        } catch (e) {
            done('mmsh: ' + e.message);
        }

        if (!Array.isArray(arr)) {
            done('mmsh: must be an array or url');
            return;
        }

        method = arr.shift();
        if (typeof (c[method]) !== 'function') {
            done('%j is not a client method', method);
            return;
        }

        arr.push(function (err, obj) {
            done(err || JSON.stringify(obj, null, 4));
        });

        c[method].apply(c, arr);
        return;
    }

    c.client.get(c._pathObj(l),
        function (err, req, res, obj) {
        done(err || JSON.stringify(obj, null, 4));
    });
});

rl.on('close', function () {
    console.log('\n\nGoodbye!');
    process.exit(0);
});
